1. player가 움직일 수 있는 범위는 상하좌우가 되면 이것을 구현하기 위해 Moveable 인터페이스를 생성한다.
    이때, Moveable은 실제 화면에 이미지로 나오는 것이 아닌 이미지로 구현된 player가 움직이는 것으로 player가 구현할 수 있도록 interface로 만드는 것이다. (사진 1번)

2. Moveable은 추상 메서드를 가지고 있다. 이것을 구현하기 위한 구현체(player)에 implements를 시킨다.
    implements를 사용하는 이유는 class의 경우에는 추상 메서드를 가질 수 없다. 때문에 추상 메서드를 구현할 수 있는 인터페이스를 생성하여 implements를 통해 무조건 구현해야하는 도구를 가지게 만드는 것이다.

    이때, player에 붉은 밑줄이 생기는데 마우스를 올리면 구현할 수 있는 버튼이 생기고 이것을 누르면 아래에 코드가 추가된다. (사진 3번)

3. 이제 player의 상태를 가져와서 활용해야한다.
    현재 x, y로 가지고 있는 것을 위치 상태라고 한다면 움직임의 상태가 추가되어야 한다.

    사진 4번을 보면 private boolean을 사용하여 상하좌우로 움직이는 상태를 받아오게 된다.
    또한, 게임은 움직임이 없는 상태로 시작되므로 현재의 위치에서 움직임이 없는 false가 들어오게 된다.

4. player는 키보드 이벤트를 받아 움직이게 된다.
    이벤트를 구현하기 위해서는 다시 BubbleFrame 클래스로 돌아가 public BubbleFrame_2() 안에 initListener() 메서드를 추가한다. (사진 4번)
    당연히 initListener() 메서드를 생성하기 위해 사진 5번과 같이 코드를 작성한다.
    하지만 new KeyListener()를 사용하게 된다면 keyTyped(), keyReleased(), keyPressed() 메소드를 모두 불러와야 오류 없이 동작하게 된다.
    (KeyListener()가 interface로 작성되어 있으며 추상 메서드 keyTyped(), keyReleased(), keyPressed()를 가지고 있기 때문이다.) (사진 6번)

    가져와야 하는 이벤트 중에서 필요한 이벤트만 사용하려면 KeyAdapter()를 사용하면 된다.
    KeyAdapter()는 추상 클래스(abstract class)로 implements KeyListener를 받아 세 가지 메서드가 구현되어 있다. (사진 7번)

    때문에 사진 8번과 같이 사용하고자 하는 메서드만을 불러 작성하게 되어도 에러가 발생하지 않는다. 
    (java를 실행한 상태에서 방향키를 누르면 값이 출력되는 것을 확인할 수 있다. -> 상, 하, 좌, 우 : 38, 40, 37, 39)

5. 키보드 이벤트로 받아오게 된 값을 이용하면 어느 방향으로 움직이려고 하는지 알아낼 수 있다.
    즉, 받아오게 된 값을 switch 문을 이용하여 원하는 방식으로 동작하게 만들면 된다. (사진 9번) 
        (실제 게임에서는 down을 눌러도 아무런 변화가 없기 때문에 down 기능은 사용하지 않는다.(주석처리) 다만, 위 층에서 떨어질 경우 down이 사용되는 것으로 나중에 down 메서드를 활용해야한다.)

6. left, right, up되는 상태를 모두 switch 문으로 작성했으니 다시 player 클래스로 돌아와 해당 메소드가 움직이는 코드를 작성한다.
    먼저, 키보드에 따라 plater가 바라보고 있는 방향을 설정해주고(setIcon()), setLocation()을 이용하여 좌표가 변경될 수 있게 만든다.