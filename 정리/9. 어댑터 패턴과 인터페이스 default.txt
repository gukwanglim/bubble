1. 버블이 나오는 방향은 player가 바라보는 방향으로 발사되듯이 나와야 한다.
    하지만 이런 player의 방향은 player의 움직임 상태로는 알 수 없다.(움직임을 멈춘 상태에서는 방향을 알 수 있는 조건이 없기 때문이다.)

    때문에 player의 방향 상태가 따로 필요하다.  
    이때, player가 바라보는 방향은 left, right 두 가지가 존재하는데 이런 내용을 사용하기 위해서는 enum 클래스를 생성하여 사용하는 것이 좋다.    (사진 1번)

    enum 클래스를 생성했다면 player 클래스에서 private로 불러와 사용할 수 있다.     (사진 2번)
    또한, 처음 게임을 시작하는 순간에는 player가 오른쪽을 바라보고 있기 때문에 바라보는 방향을 설정해준다.  (사진 3번)

    이제부터는 left, right 키보드 이벤트를 받게 될 경우 바라보는 방향이 전환되는 것이므로 이벤트가 들어올 때마다 player의 방향을 바꿔야 한다.   (사진 4번)

2. 이제 player의 방향을 알 수 있으므로 초기 세팅에서 bubble의 방향이 결정되야 한다.
    위에서도 설명했듯이 bubble의 방향은 left, right, up이 전부이다.

    그리고 이전에 만들었던 Moveable 인터페이스를 확인해보면 left, right, up, down이 존재하는 것을 확인할 수 있다.
    만약, 이 Moveable을 그대로 가져와 bubble에 적용하게 된다면 down까지도 강제되기 때문에 문제가 생기게 된다.
    이러한 문제를 해결하는 방법이 default 문법을 사용하는 것이다. (default를 사용하게 되면 abstract를 지우고 사용해야한다.)     (사진 5번)
        (default는 java의 높은 버전에서 나오게 된 문법이다.)

    만약, default 문법을 사용하지 않는다면 새로 MoveAdapter 클래스를 생성하여 추상 메소드(abstract)로 설정한다.
        이것을 Moveable로 implements 하게 된다면 Moveable의 내용들을 메서드로 생성할 수 있다.   (사진 6번)

        현재 사용되지 않는 것은 down이므로 down 만을 남겨놓고 나머지는 사용하지 않는다.

        즉, 걸러내는 역할을 하는 어뎁터를 생성했기에 Moveable 안에 존재하지 않는 left, right, up의 경우는 강제성이 실행되며, down의 경우는 강제성을 배제하게 된다.

        이와 같이 어뎁터를 생성하여 강제성을 제거할 수 있지만, Moveable를 사용하기 위해서는 Bubble 클래스에 extends를 해야한다.
        그러나 현재 Bubble 클래스에는 JLabel이 이미 상속되어 있는 상태로 다중 상속이 불가능한 java의 특성으로 인해 사용이 불가능해진다. 
            다시 말해, 어뎁터는 사용할 수 없으며, default를 사용해야 한다는 뜻이 된다.

            (이전 코드에서 keyadapter를 사용한 적이 있는데 이것은 java 1.1 버전에서 사용되는 방식이다.)

3. default를 사용했다면 다시 Bubble 클래스로 돌아와 implements로 Moveable를 사용할 수 있게 된다.    (사진 7,8번)
