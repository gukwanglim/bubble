1. 충돌감지 코드를 작성하기 전에 test를 위해서 미리 준비된 이미지를 백그라운드로 바꾼다. (사진 1,2번)

2. 현재 메인 스레드는 player의 움직임을 포착하는 역할을 맡고 있어서 다른 이벤트를 수용하기에는 알맞지 않다.
    때문에 새로운 스레드를 만들어 충돌에 대한 감지 역할을 할 수 있게 만들어야 한다.
    그러기 위해서 새로운 클래스인 BackgroundPlayerService를 생성한다.

3. BackgroundPlayerService 클래스에서는 현재 player의 위치에서 백그라운드의 색을 출력할 수 있는 코드를 작성한다. (사진 3번)
    이렇게 작성된 코드가 실제로 동작하기 위해서는 player 클래스에 연동이 필요한데, player 클래스에서 스레드를 생성하여 BackgroundPlayerService를 받아와 동작시키면 된다. (사진 4번)

    위 과정이 끝나면 현재 위치의 백그라운드 RGB 값을 알 수 있는데 이때 찍히게 되는 RGB값의 위치는 player 이미지의 좌측 상단이 된다.  (사진 5번)

    하지만 실제 게임에 들어가서는 player가 바라보는 방향을 기준으로 잡아야 벽과 출돌을 감지할 수 있다.
    찍히는 부분을 변경하기 위해서는 color가 찍히게 되는 좌표를 변경해주면 된다. (사진 6,7번)

4. 벽에 충돌되는 상태를 확인하기 위해서 BackgroundPlayerService 클래스에 if 구문을 추가하여 확인한다. (사진 8번)
    (이전에 백그라운드를 test 이미지를 사용했지만 실제 맵에서 붉은색과 푸른색으로 표현되어 있는 map 이미지를 가지고 사용한다. (사진 9번))
        -> 이렇게 사용하는 백그라운드는 프로그램 상으로 숨겨진 이미지이다. 실제 서비스를 제공하기 위해서는 게임의 백그라운드를 사용해야 하는데 이 백그라운드 이미지는 BubbleFrame 클래스에서 설정할 수 있다.
        사진 10번을 보게 되면 서비스를 제공하는 이미지의 경우에 게임 백그라운드가 들어가게 되고, 충돌의 감지하는 스레드에서는 test용 이미지가 들어가게 된다. (사진 11번)

        좌표를 계산하여 충돌의 표현한다면 하나의 이미지로 충분히 가능하지만 코드적인 부분은 더욱 복잡해진다.

5. 벽에 충돌하는 순간 키보드 이벤트를 받지 않도록 코드를 구성하게 되면 벽에 충돌하여 움직이지 못하는 것처럼 만들 수 있다. (사진 12번)
    하지만 이와 같이 false를 주더라도 키보드를 연타하거나 멀리서부터 움직이는 상태 그대로 벽에 부딪히게 된다면 벽을 뚫고 지나가게 된다.
    즉, 키보드를 누르는 잠깐의 순간동안은 true를 받아오게 된다는 뜻이다.

    이 문제를 해결하기 위해서는 이전 움직이는 상태, 위치 상태 등과 같이 벽에 충돌한 상태를 만들어야 한다. (사진 13,14번)

    player의 상태를 선언했다면 다시 BubbleFrame 클래스로 돌아와 키보드 클릭 이벤트 핸들러의 내용을 수정해야한다. (사진 15번)

    충돌한 상태에서 left, rightWallCrash의 상태를 true로 받아오기 위해서 BackgroundPlayerService에 코드를 추가한다. (사진 16번)
        (만약, true의 상태만 추가하게 된다면 한 쪽 벽에 부딪힌 상태가 지속되는 것으로 들어오기 때문에 벽은 없는 공간에서도 한 쪽 방향을 움직일 수 없게 된다.)


* 현재 생성되어 있는 스레드는 
    1. 메인 스레드 : 키보드 이벤트를 받아온다.
    2. left 스레드 : left 키가 눌리는 순간 x좌표를 -로 이동시킨다.
    3. right 스레드 : right 키가 눌리는 순간 x좌표를 +로 이동시킨다.
    4. up 스레드 : up 키가 눌리는 순간 y좌표를 -로 이동시킨 후, 다시 +로 이동시킨다.

    만약, 하나의 스레드로 모든 동장을 수행하게 된다면 왼쪽으로 가는 도중에 오른쪽으로 이동할 수 없으며, 점프와 이동을 한 번에 수행할 수 없게 된다.