1. 기능 구현을 쉽게 확인하기 위해 백그라운드를 test로 변경한다.
    만약, 올라갈 수 있는 바닥이 붉은색으로 표현되어있다면 충돌로 인식하여 비정상적인 움직임으로 보일 것이다.
    때문에 올라갈 수 있는 바닥은 푸른색으로 설정하고, 바닥이 존재하지 않는다면 제자리 점프를 하도록 만들어야 한다.

2. 바닥과 충돌하는 순간에만 위 칸으로 올라갈 수 있기 때문에 player의 아래 부분의 색을 받아올 수 있도록 BottomColor를 만들어야 한다. (사진 1번)
    이전 leftColor, rightColor와는 달리 int로 사용하게 된다면 흰색일 경우에는 -1을 출력하게 되고, 그 외의 다른 색일 경우 다른 숫자를 출력하게 된다. (사진 2번)

3. 점프를 하여 바닥 위에 올라가기 위해서는 백그라운드 색이 -1이 아닌 경우에 down을 false로 받게되면 된다. (사진 3번)
    하지만, 현재 코드에서는 바닥 위에 올라가도 계속 하강하게 된다. 그 이유는 player 클래스에서 down이 for 구문으로 돌아가기 때문에 false가 먹히지 않은 것이다.
    for 구문을 while로 변경하면 문제 없이 위로 올라가는 것을 확인할 수 있다. (사진 4번)

    현재는 왼쪽 아래 부분만 걸리면 올라갈 수 있게 된다.
    즉, 오른쪽 부분이 걸린다 하여도 위로 올라갈 수 없다는 뜻이다.
    이 문제를 해결하기 위해서는 사진 5번과 같이 양 쪽의 값을 받아와 합하고, 합해진 값이 -2인 경우에만 제자리 점프가 되도록 만드는 것이다.

4. 이제 바닥이 없는 곳으로 이동했을 경우 떨어지는 코드를 작성한다.
    위에서 만들었던 코드를 생각하면 단순하게 player의 바닥이 -2인 경우 떨어지게 만들면 된다. 즉, -2가 되는 순간 player.down()을 호출하면 된다.

    하지만 바닥이 -2일 경우, 바로 down()을 호출하게 된다면 점프하는 순간에도 바닥이 존재하지 않기 때문에 점프가 불가능하게 된다.
    그렇기 때문에 if 문을 사용하여 점프하는 상태가 아닐 경우에만 down이 실행되게 만들면 된다. (사진 6번)

    하지만 이렇게만 작성하게 된다면 높은 곳에서 떨어지다보면 down이 무한정 돌아가서 맵 밖으로 떨어지게 된다.
    이 문제를 해결하기 위해서는 if 문 안에 점프를 사용하는 상태가 아닐 경우와 down이 아닐 경우에 동작하게 만들면 된다. (사진 7번)
        즉, down이 false인 상태에서만 실행되게 한다면 계속해서 떨어지는 문제를 해결할 수 있게 된다.